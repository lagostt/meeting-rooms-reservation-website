<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/css/global.css">
    <link rel="stylesheet" href="/css/style.css">
    <title>Calendar</title>
</head>
<body class=" lg:px-12 px-9 bg-[#f7f7f8] min-w-[1320px]">
    <div class=" flex flex-row items-center justify-end bg-white fixed inset-x-0 top-0 h-[10%] shadow-lg border-b-2 border-slate-700/18 gap-x-5 lg:px-12 px-12">
        <img src="/images/logo.png" width="110" class="mr-auto h-full" />
        <a class="text-lg font-medium text-slate-600 p-2 hover:bg-slate-700/10 hover:rounded-lg " href="/my-reservations">
            My reservations
        </a>
        <a class="text-lg font-medium text-slate-600 p-2 hover:bg-slate-700/10 hover:rounded-lg" href="/rooms">
            Meeting rooms
        </a>
        <a class="text-lg font-medium text-slate-600 border-l-2 border-slate-700/20 pl-[1.25rem] hover:text-red-600 " href="#">
            Logout
        </a>
    </div>
    <div class=" flex justify-center h-screen w-full px-12 mt-24">
        <div class="w-full  h-[80%]">
            <div class="bg-white shadow-lg rounded-lg  h-full">
                <div class="flex items-center justify-between px-6 py-3 bg-gray-700 h-auto">
                    <button id="prevMonth" class="text-white">Previous</button>
                    <h2 id="currentMonth" class="text-white"></h2>
                    <button id="nextMonth" class="text-white">Next</button>
                </div>
                <div class="grid grid-cols-7 gap-2 p-4 h-[80%]" id="calendar" >
                    <!-- Calendar Days Go Here -->
                </div>
                <div id="myModal" class="modal fixed inset-0 hidden items-center justify-center z-50">
                  <div class="modal-overlay absolute inset-0 bg-black opacity-50"></div>
                
                  <div class="modal-container bg-white w-11/12 h-[400px] md:max-w-md mx-auto rounded shadow-lg z-50 overflow-y-auto">
                    <div class="modal-content py-4 text-left px-6">
                      <div class="flex justify-between items-center pb-3">
                        <p class="text-2xl font-bold">Selected Date</p>
                        <button id="closeModal" class="modal-close px-3 py-1 rounded-full bg-gray-200 hover:bg-gray-300 focus:outline-none focus:ring">âœ•</button>
                      </div>
                      <div id="modalDate" class="text-xl font-semibold "></div>
                      <div id="modalData" class="flex flex-col items-start mt-3"></div>
                    </div>
                  </div>
                </div>
            </div>
        </div>
      </div>

        <script>
            
          // Function to generate the calendar for a specific month and year
    function generateCalendar(year, month) {
        const calendarElement = document.getElementById('calendar');
        const currentMonthElement = document.getElementById('currentMonth');
        
        // Create a date object for the first day of the specified month
        const firstDayOfMonth = new Date(year, month, 1);
        const daysInMonth = new Date(year, month + 1, 0).getDate();
        
        // Clear the calendar
        calendarElement.innerHTML = '';
    
        // Set the current month text
        const monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
        currentMonthElement.innerText = `${monthNames[month]} ${year}`;
        
        // Calculate the day of the week for the first day of the month (0 - Sunday, 1 - Monday, ..., 6 - Saturday)
        const firstDayOfWeek = firstDayOfMonth.getDay();
    
        // Create headers for the days of the week
        const daysOfWeek = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
        daysOfWeek.forEach(day => {
            const dayElement = document.createElement('div');
            dayElement.className = 'text-center font-semibold h-auto flex-grow';
            dayElement.innerText = day;
            calendarElement.appendChild(dayElement);
        });
    
        // Create empty boxes for days before the first day of the month
        for (let i = 0; i < firstDayOfWeek; i++) {
            const emptyDayElement = document.createElement('div');
            emptyDayElement.className = 'h-auto flex-grow'
            calendarElement.appendChild(emptyDayElement);
        }
    
        // Create boxes for each day of the month
        for (let day = 1; day <= daysInMonth; day++) {
            const dayElement = document.createElement('div');
            dayElement.className = 'text-center text-lg py-2 border cursor-pointer h-auto flex-grow flex justify-center items-center';
            dayElement.innerText = day;
    
            // Check if this date is the current date
            const currentDate = new Date();
            if (year === currentDate.getFullYear() && month === currentDate.getMonth() && day === currentDate.getDate()) {
                dayElement.classList.add('border-2','border-blue-500',); // Add classes for the indicator
            }

            if(reservations.findIndex(
                checkUserReservationExist(day, month, year)) !== -1) {
                dayElement.classList.add('bg-green-200', 'text-green-800')
            }

            if(reservations.reduce(checkRservationExist(day, month, year))){
                dayElement.classList.add('bg-orange-200', 'text-orange-800')
            }
            
            dayElement.addEventListener('click', () => {
            const day = parseInt(dayElement.innerText);
            const selectedDate = new Date(currentYear, currentMonth, day);
            const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
            const formattedDate = selectedDate.toLocaleDateString(undefined, options);
            const options2 = { year: 'numeric', month: '2-digit', day: '2-digit' };
            const month = String(currentMonth+1).padStart(2, '0')
            const stringDay = String(day).padStart(2, '0')
            showModal(formattedDate, `${currentYear}-${month}-${stringDay}`);
        });
    
            calendarElement.appendChild(dayElement);
        }
    }
    //function checks if the user reserved the room in a specific date
    function checkUserReservationExist(currDay, currMonth, year){
        const month = String(currMonth+1).padStart(2, '0')
        const day = String(currDay).padStart(2, '0')
        const fulldate = `${year}-${month}-${day}`
        return function(e) {
            return fulldate === e.date && e.isUser;
        } 
    }

    // checks if there is a reservation in a specific date that does not include the user
    function checkRservationExist(currDay, currMonth, year) {
        const month = String(currMonth+1).padStart(2, '0')
        const day = String(currDay).padStart(2, '0')
        const fulldate = `${year}-${month}-${day}`
        return (exist, curr, defaultValue = true) => {
            return curr.date === fulldate && !curr.isUser
        }
    }
    // Initialize the calendar with the current month and year
    const data = '<%- JSON.stringify(data) %>'
    const reservations = JSON.parse(data)
    console.log( reservations)
    const currentDate = new Date();
    let currentYear = currentDate.getFullYear();
    let currentMonth = currentDate.getMonth();
    generateCalendar(currentYear, currentMonth);
    
    // Event listeners for previous and next month buttons
    document.getElementById('prevMonth').addEventListener('click', () => {
        currentMonth--;
        if (currentMonth < 0) {
            currentMonth = 11;
            currentYear--;
        }
        generateCalendar(currentYear, currentMonth);
    });
    
    document.getElementById('nextMonth').addEventListener('click', () => {
        currentMonth++;
        if (currentMonth > 11) {
            currentMonth = 0;
            currentYear++;
        }
        generateCalendar(currentYear, currentMonth);
    });

    // rest if reservations are eqaul to the selected date
    function filtedDate(selectedDate) {
        return (e) => {
            return e.date === selectedDate
        }
    }
    // Function to show the modal with the selected date
    function showModal(formattedDate, isoDate) {
    console.log('modal is working ')
        const selectedDayReservations = reservations.filter(filtedDate(isoDate))
        const modal = document.getElementById('myModal');
        const modalDateElement = document.getElementById('modalDate');
        const modalDataElement = document.getElementById('modalData')
        selectedDayReservations.map((e) => {
            const div = document.createElement('div')
            div.classList.add('text-lg')
            if(e.isUser){
                div.className = 'rounded-full bg-green-50 px-2 py-1 text-lg font-semibold text-green-600'
            } else {
                div.className = 'px-2 py-1 text-lg font-semibold'
            }
            div.textContent = `from ${e.start} to ${e.end}`
            modalDataElement.appendChild(div)
        })
        modalDateElement.innerText = formattedDate;
        modal.classList.remove('hidden');
        modal.classList.add('flex');
        
    }
    
    // Function to hide the modal
    function hideModal() {
        const modal = document.getElementById('myModal');
        const modalData = document.getElementById('modalData')
        modalData.innerHTML = ''
        modal.classList.add('hidden');
    }
    
    // Event listener for date click events
   /* const dayElements = document.querySelectorAll('.cursor-pointer');
    dayElements.forEach(dayElement => {
        dayElement.addEventListener('click', () => {
            const day = parseInt(dayElement.innerText);
            const selectedDate = new Date(currentYear, currentMonth, day);
            const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
            const formattedDate = selectedDate.toLocaleDateString(undefined, options);
            const options2 = { year: 'numeric', month: '2-digit', day: '2-digit' };
            const month = String(currentMonth+1).padStart(2, '0')
            const stringDay = String(day).padStart(2, '0')
            showModal(formattedDate, `${currentYear}-${month}-${stringDay}`);
        });
    });*/
    
    // Event listener for closing the modal
    document.getElementById('closeModal').addEventListener('click', () => {
        hideModal();
    });
    
        </script>
</body>
</html>